#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
 */

const { execSync } = require('child_process');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function printHeader(text) {
  console.log('\n' + '='.repeat(50));
  console.log(colorize(`üß™ ${text}`, 'cyan'));
  console.log('='.repeat(50));
}

function runCommand(command, description) {
  printHeader(description);
  
  try {
    console.log(colorize(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`, 'yellow'));
    
    const result = execSync(command, { 
      stdio: 'inherit',
      cwd: __dirname 
    });
    
    console.log(colorize('\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green'));
    return true;
  } catch (error) {
    console.log(colorize('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã', 'red'));
    console.error(error.message);
    return false;
  }
}

function showUsage() {
  console.log(colorize('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', 'bright'));
  console.log('');
  console.log(colorize('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'yellow'));
  console.log('  npm test                     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã');
  console.log('  npm run test:watch           - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è');
  console.log('  npm run test:coverage        - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞');
  console.log('  npm run test:verbose         - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º');
  console.log('');
  console.log(colorize('–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã:', 'yellow'));
  console.log('  node test-runner.js --auth   - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  console.log('  node test-runner.js --api    - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã API');
  console.log('  node test-runner.js --e2e    - –¢–æ–ª—å–∫–æ E2E —Ç–µ—Å—Ç—ã');
  console.log('  node test-runner.js --int    - –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
  console.log('  node test-runner.js --util   - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç');
  console.log('');
  console.log(colorize('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏:', 'yellow'));
  console.log('  --verbose                    - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥');
  console.log('  --coverage                   - –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞');
  console.log('  --watch                      - –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è');
  console.log('');
}

function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    showUsage();
    return;
  }

  let testCommand = 'jest';
  let testPaths = [];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
  if (args.includes('--auth')) {
    testPaths.push('src/pages/**/AdminLoginPage', 'src/pages/**/StudentLoginPage', 'src/pages/**/ChoiceRolePage');
  }
  
  if (args.includes('--api')) {
    testPaths.push('src/shared/api');
  }
  
  if (args.includes('--e2e')) {
    testPaths.push('src/__tests__/e2e');
  }
  
  if (args.includes('--int')) {
    testPaths.push('src/__tests__/integration');
  }
  
  if (args.includes('--util')) {
    testPaths.push('src/shared/lib');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
  if (args.includes('--verbose')) {
    testCommand += ' --verbose';
  }
  
  if (args.includes('--coverage')) {
    testCommand += ' --coverage';
  }
  
  if (args.includes('--watch')) {
    testCommand += ' --watch';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º
  if (testPaths.length > 0) {
    testCommand += ` --testPathPattern="${testPaths.join('|')}"`;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  let description = '–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Å—Ç–æ–≤';
  if (args.includes('--auth')) description = '–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
  if (args.includes('--api')) description = '–¢–µ—Å—Ç—ã API –∫–ª–∏–µ–Ω—Ç–∞';
  if (args.includes('--e2e')) description = 'E2E —Ç–µ—Å—Ç—ã';
  if (args.includes('--int')) description = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã';
  if (args.includes('--util')) description = '–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç';
  
  console.log(colorize('üéØ Frontend Test Runner', 'magenta'));
  console.log(colorize('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'blue'));
  
  const success = runCommand(testCommand, description);
  
  if (success) {
    console.log(colorize('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!', 'green'));
    
    if (args.includes('--coverage')) {
      console.log(colorize('\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ coverage/', 'blue'));
    }
  } else {
    console.log(colorize('\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏', 'red'));
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if (process.argv.length === 2) {
  showUsage();
  process.exit(0);
}

main();
